
      module polsynchemis
      implicit none

      real, dimension(:), allocatable :: gxvals, xvals
      real, dimension(:), allocatable :: gyvals,ypvals,yvvals,yavals,
     &  yavvals,yapvals
!$omp threadprivate(gxvals,xvals,gyvals,ypvals,yvvals,yavals,yavvals,yapvals)
      contains

      function gxnum(x,p,ix,iy) result(yy)
      real, dimension(:), intent(in) :: x,p
      real, dimension(size(x)) :: yy
      integer, intent(in), dimension(size(x)) :: ix,iy
!      write(6,*) 'interp in', size(gxvals), size(gyvals)
      yy=interp_gxp(x,p,ix,iy,gxvals,gyvals)
!      write(6,*) 'interp out', yy(1:10),x(1:10),ix(1:10),iy(1:10)
!      write(6,*) 'interp out',gxvals(ix(1:10)),gxvals(ix(1:10)+1)
!      write(6,*) 'interp out',gyvals(iy(1:10)*181+ix(1:10)),
!     &     gyvals(iy(1:10)*181+ix(1:10)+1)
      end function gxnum

      function gpnum(x,p,ix,iy) result(yy)
      real, dimension(:), intent(in) :: x,p
      real, dimension(size(x)) :: yy
      integer, intent(in), dimension(size(x)) :: ix,iy
      yy=interp_gxp(x,p,ix,iy,xvals,ypvals)
      end function gpnum

      function gvnum(x,p,ix,iy) result(yy)
      real, dimension(:), intent(in) :: x,p
      real, dimension(size(x)) :: yy
      integer, intent(in), dimension(size(x)) :: ix,iy
      yy=interp_gxp(x,p,ix,iy,xvals,yvvals)
      end function gvnum

      function ganum(x,p,ix,iy) result(yy)
      real, dimension(:), intent(in) :: x,p
      real, dimension(size(x)) :: yy
      integer, intent(in), dimension(size(x)) :: ix,iy
!      write(6,*) 'ganum: ',size(xvals),size(yavals)
      yy=interp_gxp(x,p,ix,iy,xvals,yavals)
      end function ganum

      function gapnum(x,p,ix,iy) result(yy)
      real, dimension(:), intent(in) :: x,p
      real, dimension(size(x)) :: yy
       integer, intent(in), dimension(size(x)) :: ix,iy
      yy=interp_gxp(x,p,ix,iy,xvals,yapvals)
      end function gapnum

      function gavnum(x,p,ix,iy) result(yy)
      real, dimension(:), intent(in) :: x,p
      real, dimension(size(x)) :: yy
      integer, intent(in), dimension(size(x)) :: ix,iy
      yy=interp_gxp(x,p,ix,iy,xvals,yavvals)
      end function gavnum

      subroutine find_inds_gxp(x,p,xv,ix,iy)
      real, dimension(:), intent(in) :: x,p,xv
      integer, dimension(size(x)) :: one, two, zero
      integer, intent(out), dimension(size(x)) :: ix,iy
      real, dimension(size(x)) :: xx
      integer :: nx
      two=2; one=1; zero=0
      nx=size(xv)
      ! First interpolate to G(x) locations for all p arrays:
      xx=alog(x); ix=int((xx-xv(1))/(xv(nx)-xv(1))*(nx))
!      write(6,*) 'find inds: ',x,p,xx,xv(1:5)
      ix = merge(merge(ix,one,ix.gt.one),nx-1,ix.lt.(nx-1))
      iy = merge(merge(one,zero,p.gt.3.2),two,p.lt.5.)
      end subroutine find_inds_gxp

      function interp_gxp(x,p,ix,iy,xv,yv) result(yy)
      real, dimension(:), intent(in) :: x,p,xv
      real, dimension(:), intent(in) :: yv
      integer, dimension(:), intent(in) :: ix,iy
      integer, dimension(size(ix)) :: indx
      real, dimension(size(x)) :: yy,slope,yix,xix,yix1,xix1,xx
      xx=alog(x); indx=iy*size(xv)+ix
!      write(6,*) 'indx: ',iy,ix,size(xv),indx,size(yv)
      ! Then interpolate between these to choose appropriate p:
      yix=yv(indx) ; yix1=yv(indx+1) ; xix1=xv(ix+1)
      xix=xv(ix)
      slope=(yix1-yix)/(xix1-xix)
      yy=yix+slope*(xx-xix)
      yy=exp(yy)
!!      write(6,*) 'xix: ',xx,xix,xix1,yy,yix
      end function interp_gxp

      subroutine del_polsynchpl(n)
      integer, intent(in) :: n
!      write(6,*) 'delpl'
      deallocate(gxvals);deallocate(gyvals)
      deallocate(xvals); deallocate(yavals)
      if(n.gt.1) then
        deallocate(ypvals)
        deallocate(yvvals)
        deallocate(yapvals);deallocate(yavvals)        
      endif
!      write(6,*) 'delafter'
      end subroutine del_polsynchpl

      subroutine initialize_polsynchpl(n)
      integer, intent(in) :: n
!      write(6,*) 'init pl: ',n
      allocate(gxvals(181)); allocate(gyvals(181*3))
      allocate(xvals(81)); allocate(yavals(81*3))
      gxvals=log((/1.e-6, 1.12202e-6, 1.25893e-6, 1.41254e-6, 
     & 1.58489e-6, 
     &  1.77828e-6, 1.99526e-6, 2.23872e-6, 2.51189e-6, 
     & 2.81838e-6, 3.16228e-6, 3.54813e-6, 3.98107e-6, 
     & 4.46684e-6, 5.01187e-6, 5.62341e-6, 6.30957e-6, 
     & 7.07946e-6, 7.94328e-6, 
     & 8.91251e-6, 0.00001, 0.0000112202, 0.0000125893, 0.0000141254, 
     & 0.0000158489, 0.0000177828, 0.0000199526, 0.0000223872,
     & 0.0000251189, 
     & 0.0000281838, 0.0000316228, 0.0000354813, 0.0000398107, 
     & 0.0000446684, 
     & 0.0000501187, 0.0000562341, 0.0000630957, 0.0000707946, 
     & 0.0000794328, 
     & 0.0000891251, 0.0001, 0.000112202, 0.000125893, 0.000141254, 
     & 0.000158489, 0.000177828, 0.000199526, 0.000223872, 0.000251189, 
     & 0.000281838, 0.000316228, 0.000354813, 0.000398107, 0.000446684, 
     & 0.000501187, 0.000562341, 0.000630957, 0.000707946, 0.000794328, 
     & 0.000891251, 0.001, 0.00112202, 0.00125893, 0.00141254, 
     & 0.00158489, 
     & 0.00177828, 0.00199526, 0.00223872, 0.00251189, 0.00281838, 
     & 0.00316228, 0.00354813, 0.00398107, 0.00446684, 0.00501187, 
     & 0.00562341, 0.00630957, 0.00707946, 0.00794328, 0.00891251, 0.01,
     & 0.0112202, 0.0125893, 0.0141254, 0.0158489, 0.0177828, 
     & 0.0199526, 0.0223872, 0.0251189, 0.0281838, 0.0316228, 0.0354813, 
     & 0.0398107, 0.0446684, 0.0501187, 0.0562341, 0.0630957, 0.0707946, 
     & 0.0794328, 0.0891251, 0.1, 0.112202, 0.125893, 0.141254, 
     & 0.158489, 
     & 0.177828, 0.199526, 0.223872, 0.251189, 0.281838, 0.316228, 
     & 0.354813, 
     & 0.398107, 0.446684, 0.501187, 0.562341, 0.630957, 0.707946,
     &  0.794328, 
     & 0.891251, 1., 1.12202, 1.25893, 1.41254, 1.58489, 1.77828, 
     & 1.99526, 
     & 2.23872, 2.51189, 2.81838, 3.16228, 3.54813, 3.98107, 4.46684, 
     & 5.01187, 5.62341, 6.30957, 7.07946, 7.94328, 8.91251, 10., 
     & 11.2202, 
     & 12.5893, 14.1254, 15.8489, 17.7828, 19.9526, 22.3872, 25.1189, 
     & 28.1838, 31.6228, 35.4813, 39.8107, 44.6684, 50.1187, 56.2341, 
     & 63.0957, 70.7946, 79.4328, 89.1251, 100., 112.202, 125.893, 
     & 141.254, 
     & 158.489, 177.828, 199.526, 223.872, 251.189, 281.838, 316.228, 
     & 354.813, 398.107, 446.684, 501.187, 562.341, 630.957, 707.946, 
     & 794.328, 891.251, 1000./))

      gyvals=log((/1.61227, 1.61227, 1.61227, 1.61227, 
     & 1.61227, 1.61227,
     & 1.61227, 
     &  1.61227, 1.61227, 1.61227, 1.61227, 1.61227, 1.61227, 1.61227, 
     &  1.61227, 1.61227, 1.61227, 1.61227, 1.61227, 1.61227, 1.61227, 
     &  1.61227, 1.61227, 1.61227, 1.61227, 1.61227, 1.61227, 1.61227, 
     &  1.61226, 1.61226, 1.61226, 1.61226, 1.61226, 1.61226, 1.61226, 
     &  1.61226, 1.61226, 1.61226, 1.61226, 1.61226, 1.61226, 1.61226, 
     &  1.61226, 1.61225, 1.61225, 1.61225, 1.61225, 1.61224, 1.61224, 
     &  1.61224, 1.61223, 1.61223, 1.61222, 1.61221, 1.6122, 1.61219, 
     &  1.61218, 1.61216, 1.61215, 1.61213, 1.61211, 1.61208, 1.61205, 
     &  1.61201, 1.61197, 1.61192, 1.61186, 1.6118, 1.61172, 1.61163, 
     &  1.61153, 1.61141, 1.61126, 1.6111, 1.61091, 1.61068, 1.61042, 
     &  1.61012, 1.60977, 1.60936, 1.60888, 1.60833, 1.60769, 
     &  1.60694, 1.60608, 1.60507, 1.6039, 1.60255, 1.60098, 1.59916, 
     &  1.59705, 1.59461, 1.59179, 1.58852, 1.58475, 1.58039, 1.57537, 
     &  1.56958, 1.56291, 1.55525, 1.54645, 1.53636, 1.5248, 1.51159, 
     &  1.49652, 1.47936, 1.45986, 1.43777, 1.41281, 1.3847, 1.35314, 
     &  1.31786, 1.27858, 1.23506, 1.18711, 1.13459, 1.07744, 1.01574, 
     & 0.949685, 0.87963, 0.806125, 0.729918, 0.651968, 0.573431, 
     & 0.495637, 
     & 0.420038, 0.348136, 0.281382, 0.22107, 0.168219, 0.12347,
     & 0.0870167, 
     & 0.0585819, 0.0374575, 0.0226003, 0.0127743, 0.00670904, 
     & 0.00324424, 
     & 0.00142967, 0.000567584, 0.000200395, 0.0000620175, 0.0000165523, 
     & 3.74115e-6, 7.01581e-7, 1.06689e-7, 1.28224e-8, 
     &  1.1833e-9, 8.11795e-11, 3.99266e-12, 1.35165e-13, 
     & 3.00895e-15, 4.18465e-17, 3.4327e-19, 1.55716e-21, 
     & 3.63357e-24, 4.02142e-27, 1.92716e-30, 3.61055e-34, 
     & 3.61055e-34, 3.61055e-34, 3.61055e-34, 3.61055e-34,
     & 3.61055e-34, 3.61055e-34, 3.61055e-34, 3.61055e-34,
     & 3.61055e-34, 3.61055e-34, 3.61055e-34, 3.61055e-34, 
     &  3.61055e-34, 3.61055e-34, 3.61055e-34, 3.61055e-34, 
     &  3.61055e-34, 3.61055e-34, 3.61055e-34, 3.61055e-34, 3.61055e-34, 
     &  3.61055e-34,
     & 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 
     & 1.60239, 
     &  1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 
     &  1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 
     &  1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 
     &  1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 
     &  1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 
     &  1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 
     &  1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60239, 1.60238, 
     &  1.60238, 1.60238, 1.60238, 1.60237, 1.60237, 1.60237, 1.60236, 
     &  1.60235, 1.60234, 1.60233, 1.60232, 1.60231, 1.60229, 1.60227, 
     &  1.60225, 1.60222, 1.60218, 1.60214, 1.60209, 1.60203, 1.60196, 
     &  1.60187, 1.60177, 1.60164, 1.60149, 1.60132, 1.6011, 
     &  1.60085, 1.60055, 1.60019, 1.59975, 1.59924, 1.59862, 1.59788, 
     &  1.59701, 1.59596, 1.59472, 1.59324, 1.59148, 1.58939, 1.58691, 
     &  1.58396, 1.58047, 1.57634, 1.57146, 1.5657, 1.55891, 1.55093, 
     &  1.54155, 1.53056, 1.51771, 1.50273, 1.48531, 1.46511, 1.44178, 
     &  1.41493, 1.38417, 1.34909, 1.30931, 1.26446, 1.21425, 1.15845, 
     &  1.09697, 1.02986, 0.957396, 0.880077, 0.798681, 0.714282,
     &  0.628244, 
     & 0.542196, 0.457971, 0.377498, 0.302673, 0.235195, 0.176398, 
     & 0.127106, 
     & 0.0875394, 0.0572903, 0.0353975, 0.0204977, 0.0110338, 
     & 0.00547068, 
     & 0.00247277, 0.00100726, 0.000364999, 0.000115967, 0.0000317834, 
     & 7.37849e-6, 1.42152e-6, 2.2212e-7, 2.74347e-8, 
     & 2.6023e-9, 1.83527e-10, 9.28027e-12, 3.23039e-13, 
     & 7.39504e-15, 1.05769e-16, 8.92369e-19, 4.16374e-21, 
     & 9.99427e-24, 1.13786e-26, 5.60975e-30, 1.08127e-33, 
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38,
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38, 
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38,
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38, 
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38,
     &  7.26554e-38,
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 
     & 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01594, 5.01593, 
     & 5.01593, 5.01593, 5.01593, 5.01592, 5.01591, 5.0159, 5.01588, 
     & 5.01586, 5.01582, 5.01576, 5.01568, 5.01557, 5.01541, 5.01517, 
     & 5.01483, 5.01435, 5.01365, 5.01266, 5.01125, 5.00925, 5.00643, 
     & 5.00245, 4.99688, 4.98911, 4.97833, 4.96347, 4.94312, 4.91546, 
     & 4.87818, 4.82843, 4.76272, 4.67697, 4.56659, 4.42662, 4.25214, 
     & 4.03876, 3.78338, 3.48505, 3.1459, 2.77198, 2.37369, 1.96555, 
     &  1.56511, 1.19096, 0.860056, 0.584881, 0.371346, 0.21802, 
     & 0.117106, 
     & 0.0568668, 0.024636, 0.00938167, 0.00308888, 0.000863182, 
     & 0.00020054, 
     & 0.0000378481, 5.65433e-6, 6.49542e-7, 5.55399e-8, 
     & 3.4084e-9, 1.44116e-10, 4.01051e-12, 6.97788e-14, 
     & 7.16602e-16, 4.07215e-18, 1.19099e-20, 1.6529e-23, 
     & 9.93732e-27, 2.33654e-30, 1.91581e-34, 7.26554e-38, 
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38, 
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38, 
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38, 
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38, 
     & 7.26554e-38, 7.26554e-38, 7.26554e-38, 7.26554e-38/))
     
      xvals=log((/1.e-6, 1.25893e-6, 1.58489e-6, 1.99526e-6, 2.51189e-6, 
     & 3.16228e-6, 3.98107e-6, 5.01187e-6, 6.30957e-6, 
     & 7.94328e-6, 0.00001, 0.0000125893, 0.0000158489, 0.0000199526, 
     & 0.0000251189, 0.0000316228, 0.0000398107, 0.0000501187, 
     & 0.0000630957, 
     & 0.0000794328, 0.0001, 0.000125893, 0.000158489, 0.000199526, 
     & 0.000251189, 0.000316228, 0.000398107, 0.000501187, 0.000630957, 
     & 0.000794328, 0.001, 0.00125893, 0.00158489, 0.00199526, 
     & 0.00251189, 
     & 0.00316228, 0.00398107, 0.00501187, 0.00630957, 0.00794328, 0.01, 
     & 0.0125893, 0.0158489, 0.0199526, 0.0251189, 0.0316228, 0.0398107, 
     & 0.0501187, 0.0630957, 0.0794328, 0.1, 0.125893, 0.158489, 
     & 0.199526, 
     & 0.251189, 0.316228, 0.398107, 0.501187, 0.630957, 0.794328, 1., 
     &  1.25893, 1.58489, 1.99526, 2.51189, 3.16228, 3.98107, 5.01187, 
     & 6.30957, 7.94328, 10., 12.5893, 15.8489, 19.9526, 25.1189, 
     & 31.6228, 
     & 39.8107, 50.1187, 63.0957, 79.4328, 100./))

      yavals=log((/1.68615, 1.68615, 1.68615, 1.68615, 1.68615,
     &  1.68615, 
     & 1.68615, 
     &  1.68615, 1.68615, 1.68615, 1.68615, 1.68615, 1.68615, 1.68615, 
     &  1.68615, 1.68615, 1.68615, 1.68615, 1.68615, 1.68615, 1.68615, 
     &  1.68615, 1.68615, 1.68615, 1.68615, 1.68615, 1.68615, 1.68615, 
     &  1.68615, 1.68615, 1.68615, 1.68615, 1.68614, 1.68614, 1.68613, 
     &  1.68612, 1.6861, 1.68608, 1.68604, 1.68599, 1.68591, 1.68578, 
     &  1.68559, 1.6853, 1.68486, 1.68419, 1.6832, 1.68171, 1.67947, 
     & 1.67615, 
     &  1.67122, 1.66395, 1.65328, 1.63778, 1.61545, 1.58369, 1.53916, 
     &  1.47788, 1.39546, 1.28776, 1.15204, 0.988583, 0.802715, 0.6061, 
     & 0.416245, 0.252825, 0.13111, 0.055529, 0.0181661, 0.00428009, 
     & 0.000665138, 0.0000610496, 2.88083e-6, 5.87072e-8, 
     & 4.14947e-10, 7.72095e-13, 2.67348e-16, 1.11338e-20, 
     & 3.21963e-26, 3.23816e-33, 4.74422e-42, 1.85936, 1.85936, 
     & 1.85936, 1.85936, 1.85936, 1.85936, 
     & 1.85936, 
     &  1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 
     &  1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 
     &  1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 
     &  1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 1.85936, 1.85935, 
     &  1.85935, 1.85935, 1.85934, 1.85933, 1.85932, 1.85929, 1.85925, 
     &  1.85918, 1.85908, 1.85891, 1.85863, 1.8582, 1.85751, 1.85643, 
     &  1.85471, 1.85201, 1.84779, 1.84124, 1.83115, 1.81577, 1.79258, 
     &  1.75815, 1.70797, 1.6365, 1.53758, 1.40555, 1.23717, 1.03442, 
     & 0.807324, 0.575158, 0.363609, 0.196841, 0.087256, 0.029943, 
     & 0.00741404, 0.0012127, 0.000117304, 5.83956e-6, 1.25645e-7, 
     & 9.38263e-10, 1.84549e-12, 6.75841e-16, 2.97724e-20, 
     & 9.11024e-26, 9.69766e-33, 1.50401e-41,8.87311, 8.87311, 8.87311,
     &  8.87311, 8.87311, 8.87311, 
     & 8.87311, 
     & 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 
     & 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 
     & 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 
     & 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 
     & 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 
     & 8.87311, 8.87311, 8.87311, 8.87311, 8.87311, 8.8731, 8.8731, 
     & 8.87308, 
     & 8.87304, 8.87294, 8.87273, 8.87223, 8.87108, 8.8685, 8.86277, 
     & 8.85029, 8.82371, 8.76874, 8.65909, 8.45023, 8.07472, 7.44713, 
     & 6.49043, 5.19178, 3.66841, 2.18097, 1.02702, 0.355521, 0.0825192, 
     & 0.01146, 0.000826581, 0.000025951, 2.84329e-7, 8.24029e-10, 
     & 4.46077e-13, 2.91275e-17, 1.32368e-22, 2.09588e-29, 
     & 4.84101e-38/))

       if(n.gt.1) then
         allocate(ypvals(81*3))
         allocate(yvvals(81*3))
         allocate(yapvals(81*3)); allocate(yavvals(81*3))

      ypvals=log((/1.2092, 1.2092, 1.2092, 1.2092, 1.2092, 
     & 1.2092, 1.2092, 
     & 1.2092, 
     &  1.2092, 1.2092, 1.2092, 1.2092, 1.2092, 1.2092, 1.2092, 1.2092, 
     &  1.2092, 1.2092, 1.2092, 1.2092, 1.2092, 1.20919, 1.20919, 
     & 1.20919, 
     &  1.20919, 1.20918, 1.20918, 1.20917, 1.20916, 1.20914, 1.20912, 
     &  1.20909, 1.20905, 1.209, 1.20892, 1.20883, 1.20869, 1.20851, 
     & 1.20826, 
     &  1.20792, 1.20747, 1.20684, 1.206, 1.20485, 1.20329, 1.20118, 
     & 1.19832, 
     &  1.19446, 1.18923, 1.18218, 1.1727, 1.15999, 1.14304, 1.12057, 
     &  1.09101, 1.05252, 1.00307, 0.940615, 0.863463, 0.770802, 
     & 0.663449, 
     & 0.54464, 0.420571, 0.300182, 0.193703, 0.109898, 0.0529319, 
     & 0.0207102, 0.00622788, 0.00134266, 0.000190145, 0.0000158469, 
     & 6.76862e-7, 1.24514e-8, 7.92618e-11, 1.32571e-13, 
     & 4.11968e-17, 1.53767e-21, 3.98094e-27, 3.5814e-34, 
     & 4.69011e-43,1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 
     & 1.23613, 
     &  1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 
     &  1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 
     &  1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 1.23613, 
     &  1.23613, 1.23612, 1.23612, 1.23612, 1.23611, 1.2361, 1.23608, 
     &  1.23606, 1.23602, 1.23598, 1.23591, 1.23581, 1.23567, 1.23547, 
     &  1.23518, 1.23476, 1.23415, 1.23329, 1.23204, 1.23026, 1.22771, 
     &  1.22407, 1.21888, 1.21152, 1.20111, 1.1865, 1.16613, 1.13805, 
     &  1.09983, 1.04872, 0.981833, 0.896758, 0.792373, 0.670034, 
     & 0.534751, 
     & 0.395757, 0.265604, 0.157164, 0.0791477, 0.0324502, 0.010245, 
     & 0.00232262, 0.00034636, 0.0000304304, 1.37147e-6, 2.66413e-8, 
     &  1.79193e-10, 3.16841e-13, 1.04127e-16, 4.11162e-21, 
     &  1.12641e-26, 1.07254e-33, 1.48684e-42,4.29938, 4.29938, 
     & 4.29938, 4.29938, 4.29938, 4.29938, 
     & 4.29938, 
     & 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 
     & 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 
     & 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 
     & 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 
     & 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 4.29938, 
     & 4.29938, 4.29938, 4.29937, 4.29937, 4.29937, 4.29936, 4.29934, 
     & 4.29931, 4.29923, 4.29907, 4.29872, 4.298, 4.29649, 4.29337, 
     & 4.28704, 
     & 4.27436, 4.24956, 4.2024, 4.11596, 3.96463, 3.7148, 3.3318, 
     & 2.79708, 
     & 2.13342, 1.42299, 0.791159, 0.345507, 0.110126, 0.0233937, 
     & 0.0029585, 
     & 0.000193519, 5.49141e-6, 5.42315e-8, 1.41355e-10, 
     & 6.86965e-14, 4.0212e-18, 1.63627e-23, 2.31768e-30, 
     & 4.78532e-39/))

      yvvals=log((/2.0023, 2.0023, 2.0023, 2.0023, 2.0023, 
     & 2.0023, 2.0023, 
     & 2.0023, 
     & 2.0023, 2.0023, 2.0023, 2.0023, 2.0023, 2.0023, 2.0023, 2.0023, 
     & 2.0023, 2.0023, 2.0023, 2.0023, 2.0023, 2.0023, 2.0023, 2.00229, 
     & 2.00229, 2.00229, 2.00229, 2.00228, 2.00228, 2.00227, 2.00226, 
     & 2.00224, 2.00222, 2.00219, 2.00215, 2.00208, 2.002, 2.00187, 
     & 2.0017, 
     & 2.00145, 2.00111, 2.00062, 1.99994, 1.99897, 1.99762, 1.99573, 
     &  1.99307, 1.98935, 1.98417, 1.97694, 1.96692, 1.95304, 1.93393, 
     &  1.90776, 1.87218, 1.82424, 1.76041, 1.67668, 1.56895, 1.43374, 
     &  1.26941, 1.07777, 0.865886, 0.647096, 0.440103, 0.264945,
     & 0.136304, 
     & 0.0573288, 0.0186436, 0.00437069, 0.000676414, 0.0000618753, 
     & 2.91183e-6, 5.92087e-8, 4.17758e-10, 7.76241e-13, 
     & 2.68485e-16, 1.11713e-20, 3.22824e-26, 3.24502e-33, 
     & 4.75219e-42,2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 
     & 2.15038, 
     & 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 
     & 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 
     & 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 2.15038, 
     & 2.15038, 2.15038, 2.15038, 2.15038, 2.15037, 2.15036, 2.15035, 
     & 2.15034, 2.15032, 2.15029, 2.15024, 2.15017, 2.15006, 2.1499, 
     & 2.14967, 2.14931, 2.14879, 2.14801, 2.14686, 2.14515, 2.14262, 
     & 2.13888, 2.1334, 2.12535, 2.11362, 2.09659, 2.07208, 2.0371, 
     & 1.98776, 
     &  1.91922, 1.8258, 1.70164, 1.54181, 1.34442, 1.11332, 0.86064, 
     & 0.607541, 0.380813, 0.204567, 0.0900656, 0.0307265, 0.0075705, 
     & 0.00123322, 0.000118888, 5.90232e-6, 1.26717e-7, 9.44616e-10, 
     &  1.8554e-12, 6.7866e-16, 2.98728e-20, 9.13458e-26, 
     & 9.7182e-33, 1.50654e-41,9.48231, 9.48231, 9.48231, 9.48231, 
     & 9.48231, 9.48231, 
     & 9.48231, 
     & 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 
     & 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 
     & 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 
     & 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 
     & 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 
     & 9.48231, 9.48231, 9.48231, 9.48231, 9.48231, 9.4823, 9.48228, 
     & 9.48224, 9.48216, 9.48198, 9.48159, 9.48075, 9.47893, 9.47505, 
     & 9.46685, 9.44983, 9.41514, 9.34622, 9.21364, 8.96904, 8.5414, 
     & 7.84362, 6.80131, 5.4102, 3.80094, 2.2473, 1.05287, 0.362835, 
     & 0.0838923, 0.0116132, 0.000835404, 0.0000261716, 2.86249e-7, 
     & 8.28444e-10, 4.47972e-13, 2.92257e-17, 1.32721e-22, 
     & 2.10032e-29, 4.84914e-38/))

      yapvals=log((/1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 
     & 1.33117, 
     & 1.33117, 
     &  1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 
     &  1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 
     &  1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 
     &  1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 1.33117, 1.33116, 
     &  1.33116, 1.33115, 1.33114, 1.33112, 1.33109, 1.33105, 1.33098, 
     &  1.33088, 1.33073, 1.33049, 1.33013, 1.32959, 1.32877, 1.32753, 
     &  1.32565, 1.32281, 1.31854, 1.31215, 1.30264, 1.28861, 1.26811, 
     &  1.23857, 1.19672, 1.13872, 1.06059, 0.959064, 0.833055, 
     &  0.685503, 
     & 0.524986, 0.365851, 0.225498, 0.118622, 0.0509271, 0.0168718, 
     & 0.00402081, 0.000631225, 0.0000584537, 2.77948e-6, 5.70103e-8, 
     & 4.05151e-10, 7.57283e-13, 2.63197e-16, 1.09944e-20, 
     & 3.18723e-26, 3.21202e-33, 4.71356e-42,1.49656, 1.49656, 
     & 1.49656, 1.49656, 1.49656, 1.49656, 
     & 1.49656, 
     &  1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 
     &  1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 
     &  1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 
     &  1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 1.49656, 1.49655, 
     &  1.49655, 1.49655, 1.49655, 1.49654, 1.49654, 1.49652, 1.4965, 
     &  1.49647, 1.49641, 1.49632, 1.49617, 1.49594, 1.49556, 1.49495, 
     &  1.49398, 1.49242, 1.48995, 1.48602, 1.47984, 1.47016, 1.4552, 
     &  1.43236, 1.39809, 1.34778, 1.276, 1.17723, 1.04741, 0.886429, 
     & 0.701003, 0.50638, 0.324671, 0.178221, 0.0800603, 0.027817, 
     & 0.006966, 
     & 0.00115097, 0.000112321, 5.63427e-6, 1.22015e-7, 9.1612e-10, 
     &  1.81009e-12, 6.65297e-16, 2.93997e-20, 9.01856e-26, 
     & 9.61937e-33, 1.49429e-41,7.72819, 7.72819, 7.72819, 7.72819,
     &  7.72819, 7.72819,
     &  7.72819, 
     & 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 
     & 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 
     & 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 
     & 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 
     & 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 
     & 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72819, 7.72818, 
     & 7.72817, 7.72815, 7.7281, 7.72797, 7.72766, 7.72694, 7.72527, 
     & 7.72147, 7.71294, 7.69421, 7.65428, 7.57217, 7.41097, 7.11254, 
     & 6.59963, 5.79696, 4.68061, 3.34189, 2.00868, 0.956232, 0.334467, 
     & 0.0783755, 0.0109776, 0.000797694, 0.0000252042, 2.77635e-7, 
     & 8.08249e-10, 4.3916e-13, 2.87632e-17, 1.31036e-22, 
     & 2.07897e-29, 4.80973e-38/))

      yavvals=log((/2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 
     & 2.4184, 2.4184, 
     & 2.4184, 
     & 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 
     & 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 
     & 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 2.4184, 
     & 2.4184, 2.4184, 2.41839, 2.41839, 2.41838, 2.41838, 2.41836, 
     & 2.41834, 
     & 2.41831, 2.41826, 2.41818, 2.41805, 2.41784, 2.41753, 2.41702, 
     & 2.41623, 2.415, 2.41307, 2.41007, 2.4054, 2.39819, 2.38712, 
     & 2.37023, 
     & 2.34469, 2.30655, 2.25042, 2.1694, 2.05534, 1.89985, 1.69649, 
     &  1.44436, 1.15245, 0.842893, 0.549332, 0.307799, 
     &  0.141745, 0.0507007, 
     & 0.0131234, 0.00224954, 0.000228512, 0.0000119668, 2.71238e-7, 
     & 2.13613e-9, 4.4351e-12, 1.71554e-15, 7.98833e-20,
     & 2.58475e-25, 2.91044e-32, 4.77607e-41,
     & 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 
     & 2.82708, 
     & 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 
     & 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 
     & 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 
     & 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 2.82708, 
     & 2.82708, 2.82708, 2.82708, 2.82707, 2.82707, 2.82706, 2.82704, 
     & 2.82701, 2.82696, 2.82688, 2.82675, 2.82653, 2.82617, 2.82557, 
     & 2.82457, 2.82293, 2.82022, 2.81579, 2.80858, 2.79694, 2.7783, 
     & 2.7488, 
     & 2.70282, 2.63253, 2.52773, 2.37642, 2.16685, 1.89169, 1.55439, 
     &  1.17567, 0.795468, 0.464372, 0.22349, 0.083764, 0.0227681, 
     & 0.00410569, 0.000439374, 0.0000242679, 5.80669e-7, 4.83103e-9, 
     &  1.06022e-11, 4.33678e-15, 2.13622e-19, 7.31401e-25, 
     & 8.71637e-32, 1.51413e-40, 17.9141, 17.9141, 
     & 17.9141, 17.9141, 17.9141, 17.9141, 
     & 17.9141, 
     & 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 
     & 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 
     & 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 
     & 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 
     & 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 
     & 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 17.9141, 
     & 17.9141, 17.914, 17.914, 17.9138, 17.9135, 17.9126, 17.9105,
     &  17.9056, 
     & 17.8941, 17.8679, 17.8095, 17.6835, 17.4228, 16.9117, 15.9767, 
     & 14.4111, 12.0693, 9.03454, 5.75357, 2.93042, 1.10608, 0.281742, 
     & 0.0431579, 0.00344698, 0.000120196, 1.46602e-6, 4.73813e-9, 
     & 2.86423e-12, 2.09069e-16, 1.06293e-21, 1.88407e-28, 
     & 4.87399e-37/))
 
      endif

      end subroutine initialize_polsynchpl
  
      subroutine polsynchpl(nu,nnth,b,th,p,gmin,gmax,e)
      use phys_constants, ec=>e
      ! Compute polarized synch from PL dist from Westford (1959)
      ! JAD 4/7/2011
!      type (emis), intent(in) :: vars
      double precision, intent(in), dimension(:) :: nnth,b,th,p
      double precision, intent(in), dimension(size(b)) :: nu,gmin
      double precision, intent(out), dimension(size(b),11) :: e
      double precision, dimension(size(b)) :: nub,
     & nucmin,nucmax,omega0,omega,A,jfac,alpha,kperp,
     & nubperp,nui,kstaralphaq,kstaralphav,kstarq,kstarv,afac,ai,aq,av,
     &  ji,jq,jv,rhoq,zero
      real, dimension(size(b)) :: xmin,xmax
      real, dimension(size(b)) :: gafac,gapfac,
     & gavfac,gxfac,gpfac,gvfac
      double precision, intent(in) :: gmax
      zero=0.
!      n=n ; nnth=nnth
!      b=vars%bcgs ; t=vars%tcgs ; p=vars%p
!      gmin=vars%gmin ; gmax=vars%gmax ; th=vars%incang
!      write(6,*) 'polb: ',b,nnth,nu,p
 !     write(6,*) 'polb: ',b
 !     write(6,*) 'poln: ',nnth
 !     write(6,*) 'polnu: ',nu
 !     write(6,*) 'polp: ',p
      nub=ec*b/m/c/2./pi+1d0; nubperp=nub*sin(th)
      nucmin=3./2.*nub*gmin**2 ; nucmax=3./2.*nub*gmax**2
      omega0=nub*2.*pi ; omega=nu*2.*pi
      xmin=nu/nucmin ; xmax=nu/nucmax
! CHANGE TO BL09 WAY TO TEST TOYJET
!      xmin=1e10; xmax=1e-10
      A=(p-1.)*nnth/(gmin**(1.-p)-gmax**(1.-p))
!      write(6,*) 'x: ',xmin,xmax,real(p),gmin,gmax
      call get_polsynchpl_facs(xmin,xmax,real(p),gxfac,gpfac,gvfac,
     &  gafac,gapfac,gavfac)
      jfac=A*ec*ec/c*sqrt(3.)/4.*
     & (3.*nub*sin(th)/2./nu)**((p-1)/2.)*nub*sin(th)
!      write(6,*) 'jfac: ',jfac,th,A
      ji=jfac*gxfac
      jq=jfac*gpfac
      jv=jfac*4./3./tan(th)*
     &  sqrt(3.*nub*sin(th)/2./nu)*gvfac
      alpha=(p-1.)/2.
      kperp=A*ec*ec/m/c/nubperp
      nubperp=ec*B*sin(th)/2./pi/m/c
      nui=gmin*gmin*nubperp
      kstaralphaq=1.
      kstaralphav=2.*(alpha+3./2.)/(alpha+1.)
      kstarq=kstaralphaq*kperp*(nubperp/nu)**3.*gmin**(-2*alpha-1)*
     & (1.-(nui/nu)**(alpha-1./2.))*(alpha-1./2.)**(-1.)*gapfac
      kstarq=merge(kstarq,zero,nu.gt.nui)
      kstarv=kstaralphav*kperp*(nubperp/nu)**2.*log(gmin)*
     & gmin**(-2*(alpha+1))/tan(th)*gavfac
      afac=(2.*pi)**3*A*ec*ec*sqrt(3.)*omega0*sin(th)*(p+2.)/32./
     &  pi**2/m/c/omega**2*(2.*omega/3./omega0/sin(th))**(-p/2.)
      ai=afac*gafac
      aq=afac*gapfac
      av=afac*4./3./tan(th)*gavfac*(2.*omega/3./omega0/sin(th))
     &  **(-1./2.)
      e(:,1)=ji; e(:,2)=jq; e(:,3)=ji*0.; e(:,4)=jv
      e(:,5)=ai; e(:,6)=aq; e(:,7)=0.*ai; e(:,8)=av
      e(:,9)=kstarq; e(:,10)=rhoq*0.; e(:,11)=kstarv

      ! Zero out all but linear contributions for toyjet:
!      e(:,4)=0.; e(:,9)=0.; e(:,11)=0.; e(:,8)=0.;

!      write(6,*) 'th: ',th,sin(th),tan(th) 
!      write(6,*) 'g: ',gxfac,gpfac,gvfac,gafac,gapfac,gavfac
!      write(6,*) 'afac: ',afac
!      write(6,*) 'nub: ',nub,b,ji
!      write(6,*) 'a: ',ai
!      write(6,*) 'kstar: ',kstarv,kstarq

      contains

      subroutine get_polsynchpl_facs(xmin,xmax,p,gfac,gpfac,gvfac,
     &  gafac,gapfac,gavfac)
      real, dimension(:), intent(in) :: xmin,xmax,p
      real, dimension(size(xmin)), intent(out) :: gfac,gafac,
     & gpfac,gvfac,gapfac,gavfac
      integer, dimension(size(xmin)) :: ix1,ix2,iy1,iy2
      call find_inds_gxp(xmax,p,gxvals,ix2,iy2)
      call find_inds_gxp(xmin,p,gxvals,ix1,iy1)
!!      write(6,*) 'facs: ',ix1,ix2,iy1,iy2
      gfac=gxnum(xmax,p,ix2,iy2)-gxnum(xmin,p,ix1,iy1)
!!      write(6,*) 'p: ',p,ix2,iy2,ix1,iy1,xmin,xmax
!!      write(6,*) 'size: ',size(yavals)
!!      write(6,*) 'xmax: ',ix2,iy2
      call find_inds_gxp(xmax,p,xvals,ix2,iy2)
      call find_inds_gxp(xmin,p,xvals,ix1,iy1)
!!      write(6,*) 'xmax: ',ix2,iy2,ix1,iy1
      gafac=ganum(xmax,p,ix2,iy2)-ganum(xmin,p,ix1,iy1)
      gpfac=gpnum(xmax,p,ix2,iy2)-gpnum(xmin,p,ix1,iy1)
      gapfac=gapnum(xmax,p,ix2,iy2)-gapnum(xmin,p,ix1,iy1)
      gvfac=gvnum(xmax,p,ix2,iy2)-gvnum(xmin,p,ix1,iy1)
      gavfac=gavnum(xmax,p,ix2,iy2)-gavnum(xmin,p,ix1,iy1)
      end subroutine get_polsynchpl_facs

      end subroutine polsynchpl

      subroutine synchpl(nu,nnth,b,th,p,gmin,gmax,e)
      use phys_constants, ec=>e
      ! Compute polarized synch from PL dist from Westford (1959)
      ! JAD 4/7/2011
!      type (emis), intent(in) :: vars
      double precision, intent(in), dimension(:) :: nnth,b,th,p
      double precision, intent(in), dimension(size(b)) :: nu,gmin
      double precision, intent(out), dimension(size(b),11) :: e
      double precision, dimension(size(b)) :: nub,
     & nucmin,nucmax,omega0,omega,A,jfac,alpha,kperp,
     & nubperp,nui,afac,ai,
     &  ji,zero
      real, dimension(size(b)) :: xmin,xmax
      real, dimension(size(b)) :: gafac,gxfac
      double precision, intent(in) :: gmax
      zero=0.
!      n=n ; nnth=nnth
!      b=vars%bcgs ; t=vars%tcgs ; p=vars%p
!      gmin=vars%gmin ; gmax=vars%gmax ; th=vars%incang
!      write(6,*) 'polb: ',b,nnth,nu,p
      nub=ec*b/m/c/2./pi ; nubperp=nub*sin(th)
      nucmin=3./2.*nub*gmin**2 ; nucmax=3./2.*nub*gmax**2
      omega0=nub*2.*pi ; omega=nu*2.*pi
      xmin=nu/nucmin ; xmax=nu/nucmax
      A=(p-1.)*nnth/(gmin**(1.-p)-gmax**(1.-p))
!      write(6,*) 'x: '!,xmin,xmax,real(p),gmin,gmax
      call get_synchpl_facs(xmin,xmax,real(p),gxfac,
     &  gafac)
      jfac=A*ec*ec/c*sqrt(3.)/4.*
     & (3.*nub*sin(th)/2./nu)**((p-1)/2.)*nub*sin(th)
!      write(6,*) 'jfac: '!,jfac,th,A
      ji=jfac*gxfac
      alpha=(p-1.)/2.
      kperp=A*ec*ec/m/c/nubperp
      nubperp=ec*B*sin(th)/2./pi/m/c
      nui=gmin*gmin*nubperp
      afac=(2.*pi)**3*A*ec*ec*sqrt(3.)*omega0*sin(th)*(p+2.)/32./
     &  pi**2/m/c/omega**2*(2.*omega/3./omega0/sin(th))**(-p/2.)
      ai=afac*gafac
!      write(6,*) 'ai: ',ai
!      write(6,*) 'gafac: ',gafac
      e(:,1)=ji; e(:,5)=ai
!      if(minval(ai).lt.0.) write(6,*) 'ai lt 0: ',nnth,b,th,gafac
!      write(6,*) 'ji: ',ji(1),ai(1),nub(1),sin(th(1)),afac(1)
      contains

      subroutine get_synchpl_facs(xmin,xmax,p,gfac,gafac)
      real, dimension(:), intent(in) :: xmin,xmax,p
      real, dimension(size(xmin)), intent(out) :: gfac,gafac
      integer, dimension(size(xmin)) :: ix1,ix2,iy1,iy2
!      write(6,*) 'synchpl facs'
      call find_inds_gxp(xmax,p,gxvals,ix2,iy2)
!      write(6,*) 'synchpl facs',ix2,iy2
      call find_inds_gxp(xmin,p,gxvals,ix1,iy1)
!      write(6,*) 'synchpl facs',ix1,iy1
      gfac=gxnum(xmax,p,ix2,iy2)-gxnum(xmin,p,ix1,iy1)
      call find_inds_gxp(xmin,p,xvals,ix1,iy1)
      call find_inds_gxp(xmax,p,xvals,ix2,iy2)
      gafac=ganum(xmax,p,ix2,iy2)-ganum(xmin,p,ix1,iy1)
      end subroutine get_synchpl_facs

      end subroutine synchpl

      subroutine polsynchth(nu,n,b,t,theta,e)
      use phys_constants, ec=>e
      implicit none
      ! Calculate polarized synchrotron emission/absorption
      ! coefficients in ultrarel limit using formulas from Huang et al
      ! (2009) and Shcherbakov (2008) for transfer
      ! JAD 1/29/2010
      double precision, intent(in), dimension(:) :: nu,n,t,b,theta
      double precision, intent(out), dimension(size(n),11) :: e
      double precision, dimension(size(n)) :: thetae,nuc,xm,ji,
     & jq,jv,ju,bnutnu
      double precision, dimension(size(n)) :: ai,aq,av,au,rhou,
     & rhoq,rhov,xarg,eps11m22,eps12
      double precision, dimension(size(n)) :: tm,tp,targ,
     & omega0,wp2
      double precision :: nucminval = 1d0
      double precision :: thetaemin = 1d-16
!      write(*,*) 'vars: ',size(B),size(T),size(n),size(nu)
      thetae=k*T/m/c/c+thetaemin
      ! Critical frequency for synchrotron emission:
      nuc=3d0*ec*B*sin(theta)/4d0/pi/m/c*thetae**2+nucminval
      xm=nu/nuc
      ji=ec**2/c/sqrt(3d0)/2d0*n/thetae**2*nu*iix(xm)
      jq=ec**2/c/sqrt(3d0)/2d0*n/thetae**2*nu*iqx(xm)
      jv=4d0*ec**2/c/3d0/sqrt(3d0)/tan(theta)*n/2d0/thetae**3d0*nu*
     &    ivx(xm)
      ju=0d0
!      write(6,*) 'vars'
!      write(6,'(3E9.4)') n,B,T
!      write(*,*) 'nu: ',minval(nu),maxval(nu),minval(nuc),
!     &   maxval(nuc),minval(b),maxval(b),minval(theta),maxval(theta)
!      write(*,*) 'xm: '
!      write(6,'(4E9.4)') xm,iix(xm),iqx(xm),ivx(xm)
!      write(6,*) 'j: ', jq/ji
      bnutnu=bnu(T,nu)
!      write(6,*) 'bnu: ',maxval(T), minval(nu),maxval(nu)
      ai=ji/bnutnu
      aq=jq/bnutnu
      av=jv/bnutnu
      au=ju/bnutnu
      ! Now compute Faraday coefficients:
      rhou=au
      ! Formulae from Shcherbakov (2008):
      wp2=4d0*pi*n*ec**2/m
      omega0=ec*B/m/c
      xarg=thetae*sqrt(sqrt(2d0)*sin(theta)*(1.d3*omega0/2d0/pi/nu))
      eps11m22=shffunc(xarg)*wp2*omega0**2/(2d0*pi*nu)**4*
     &(beselk(1d0/thetae,1)/beselk(1d0/thetae,2)+6d0*thetae)*
     & sin(theta)**2
      eps12=shgfunc(xarg)*wp2*omega0/(2d0*pi*nu)**3*
     &beselk(1d0/thetae,0)/beselK(1d0/thetae,2)*cos(theta)
!      write(*,*) 'eps: ',eps11m22, eps12
      targ=sqrt(4d0*eps12**2+eps11m22**2)
      tp=-(eps11m22-targ)/2d0/eps12
      tm=-(eps11m22+targ)/2d0/eps12
      rhov=2d0*pi*nu/c*eps12
      rhoq=2d0*pi*nu/2d0/c*eps11m22
! confusion about sign of rhoq. Shcherbakov (2008) disagrees with Huang & Shcherbakov (2011). Statement is different basis vectors. Basis looks identical between SH10, which I follow, and HS11. So I did signs as in Huang & Shcherbakov.
!      rhoq=-2d0*pi*nu/2d0/c*eps11m22
! test unpolarized
!      jq=0.; jv=0.; aq=0.; av=0.; rhoq=0.; rhov=0.
! w/o Faraday:
!      rhoq=0.; rhov=0
      e=reshape((/ji,jq,ju,jv,ai,aq,au,av,
     & rhoq,rhou,rhov/),(/size(ji),11/),order=(/1,2/))
!      write(6,*) 'ai: ',ai, e(:,5), e(:,1), ji
 !     write(6,*) 'reshape: ',maxval(emis(:,1)), maxval(emis(:,5))
      if(any(isnan(jq))) then
         write(6,*) 'NaN in polsynchemis.f'
         write(6,*) 'xm: ',xm
         write(6,*) 'iqx: ',iqx(xm)
         write(6,*) 'bnutnu: ',bnutnu
         write(6,*) 'theta: ',theta
      endif

      contains

        function shffunc(x)
        ! Fitting function F(X) from Shcherbakov (2008)
        ! JAD 1/29/2010
        double precision, intent(in), dimension(:) :: x
        double precision, dimension(size(x)) :: shffunc
        shffunc=2.011d0*dexp(-x**(1.035d0)/4.7d0)-cos(x/2d0)*
     &         dexp(-x**(1.2d0)/2.73d0)
     &         -.011d0*dexp(-x/47.2d0)
        end function shffunc

        function shgfunc(x)
        ! Fitting function G(X) from Shcherbakov (2008)
        ! JAD 1/29/2010
        double precision, intent(in), dimension(:) :: x
        double precision, dimension(size(x)) :: shgfunc
        shgfunc=1d0-0.11d0*log(1d0+.035d0*x)
        end function shgfunc
        
        function beselk(x,n)
        ! Asymptotic bessel functions for small x
        ! and n=0,2
        double precision, intent(in), dimension(:) :: x
        double precision, dimension(size(x)) :: beselk
        integer, intent(in) :: n
        if(n.eq.0) then 
          beselk=-log(x/2d0)-.5772d0 
        else if(n.eq.1) then
          beselk=1d0/x
        else
          beselk=2d0/x/x
        endif
        end function beselk

        function iqx(x)
        ! Fitting function for polarized synchrotron emissivity function
        ! I_Q(x) fit using asymptotic expansions to integral in Huang et al
        ! (2009)
        ! JAD 1/28/2010
        double precision, intent(in), dimension(:) :: x
       double precision, dimension(size(x)) :: iqx
        iqx=2.5651d0*(1d0+.93193d0/x**(1d0/3d0)+.499873d0/x**(2d0/3d0))*
     &  dexp(-1.8899d0*x**(1d0/3d0))
        end function iqx

       function ivx(x)
       ! Fitting function for polarized synchrotron emissivity function
       ! I_V(x) fit using asymptotic expansions to integral in Huang et al
       ! (2009)
       ! JAD 1/28/2010
       double precision, intent(in), dimension(:) :: x
       double precision, dimension(size(x)) :: ivx
       ivx=(1.81384d0/x+3.42319d0/x**(2d0/3d0)+0.0292545d0/
     &  sqrt(x)+2.03773d0/
     &  x**(1d0/3d0))*dexp(-1.8899d0*x**(1d0/3d0))
       end function ivx

       function iix(x)
       ! Fitting function I(x) from Mahadevan et al (1996)
       ! JAD 1/29/2010
       double precision, intent(in), dimension(:) :: x
       double precision, dimension(size(x)) :: iix
       iix=2.5651d0*(1d0+1.92d0/x**(1d0/3d0)+.9977d0/x**(2d0/3d0))*
     & dexp(-1.8899d0*x**(1d0/3d0))
       end function iix

      end subroutine polsynchth

      subroutine synchemis(nu,n,B,T,e)
      ! To calculate the synchotron emissivity in cgs units
      ! Uses approximation from Mahadevan et al (1996)
      !
      ! JAD 11/25/2008
      use phys_constants, only: k, m, c, c2, ec=>e, pi
      double precision, dimension(:), intent(in) :: nu,n,B,T
      double precision, dimension(size(n),11), intent(out) :: e
      double precision, dimension(size(n)) :: thetae,nucrit,xm,jnu,anu
      
      thetae=k*T/m/c2
      nucrit = 3.*ec*B/(4*pi*m*c)*thetae**2.+1.  ! This is actually nucrit/z**2 where z=E/kT
      xm     = nu/nucrit
      jnu=4.43e-30/2.*nu*n*ipx(xm)/thetae**2
      ! Calculate anu from LTE:
      anu=jnu/bnu(T,nu)
      e=0.
      e(:,1)=jnu; e(:,5)=anu

      contains
      
      function ipx(x) result(i)
      ! I'(x) as defined in Mahadevan et. al. (1998)
      ! JAD 6/26/2007
      double precision, dimension(:), intent(in) :: x
      double precision, dimension(size(x)) :: i
      i=4.0505/exp(log(x)/6.)*(1+.40/sqrt(sqrt(x))+0.5316/sqrt(x))*
     & exp(-1.8899*exp(log(x)/3.))
      end function ipx

      end subroutine synchemis

      subroutine synchemisnoabs(nu,n,T,B,e)
!     To calculate the synchotron emissivity in cgs units with no absorption
      double precision, dimension(:), intent(in) :: nu,n,T,B
      double precision, dimension(size(nu),11), intent(out) :: e
      call synchemis(nu,n,T,B,e)
! now set absorption coefs = 0
      e(:,5:11)=0.
      end subroutine synchemisnoabs

      function bnu(T,nu)
      ! Planck spectrum for array of T, scalar nu in cgs units.
      ! JAD 2/2/2009
      use phys_constants, only: h,c2,k
      double precision, intent(in), dimension(:) :: T,nu
      double precision, dimension(size(T)) :: bnu
!      write(6,*) 'bnu: ',T,nu
      bnu = 2d0*h*nu/c2*nu*nu/(exp(h*nu/k/T)-1d0)
      end function bnu

      end module polsynchemis
